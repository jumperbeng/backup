# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from segway_rmp/SegwayStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SegwayStatus(genpy.Message):
  _md5sum = "658b68a87a84c7483fa3f522de0a2f66"
  _type = "segway_rmp/SegwayStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This is the msg definition for the Segway Status struct.

# Gain Schedule Constants
int8    LIGHT=1
int8    TALL=2
int8    HEAVY=3

# Operation Mode Constants
int8    BALANCE=1
int8    TRACTOR=2
int8    POWER_DOWN=3

float32 pitch_angle                 # radians
float32 pitch_rate                  # radians/s
float32 roll_angle                  # radians
float32 roll_rate                   # radians/s
float32 left_wheel_velocity         # meters/s
float32 right_wheel_velocity        # meters/s
float32 yaw_rate                    # radians/s
float32 servo_frames                # frames/second
float32 left_wheel_displacement     # meters
float32 right_wheel_displacement    # meters
float32 forward_displacement        # meters
float32 yaw_displacement            # revolutions
float32 left_motor_torque           # Newton-meters
float32 right_motor_torque          # Newton-meters
int8    operation_mode              # Balance, Tractor, or Powered Down
int8    gain_schedule               # Light, Tall, or Heavy
float32 ui_battery                  # Volts
float32 powerbase_battery           # Volts

bool    motors_enabled              # Enabled (true) or E-Stopped (false)
"""
  # Pseudo-constants
  LIGHT = 1
  TALL = 2
  HEAVY = 3
  BALANCE = 1
  TRACTOR = 2
  POWER_DOWN = 3

  __slots__ = ['pitch_angle','pitch_rate','roll_angle','roll_rate','left_wheel_velocity','right_wheel_velocity','yaw_rate','servo_frames','left_wheel_displacement','right_wheel_displacement','forward_displacement','yaw_displacement','left_motor_torque','right_motor_torque','operation_mode','gain_schedule','ui_battery','powerbase_battery','motors_enabled']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int8','int8','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pitch_angle,pitch_rate,roll_angle,roll_rate,left_wheel_velocity,right_wheel_velocity,yaw_rate,servo_frames,left_wheel_displacement,right_wheel_displacement,forward_displacement,yaw_displacement,left_motor_torque,right_motor_torque,operation_mode,gain_schedule,ui_battery,powerbase_battery,motors_enabled

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SegwayStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pitch_angle is None:
        self.pitch_angle = 0.
      if self.pitch_rate is None:
        self.pitch_rate = 0.
      if self.roll_angle is None:
        self.roll_angle = 0.
      if self.roll_rate is None:
        self.roll_rate = 0.
      if self.left_wheel_velocity is None:
        self.left_wheel_velocity = 0.
      if self.right_wheel_velocity is None:
        self.right_wheel_velocity = 0.
      if self.yaw_rate is None:
        self.yaw_rate = 0.
      if self.servo_frames is None:
        self.servo_frames = 0.
      if self.left_wheel_displacement is None:
        self.left_wheel_displacement = 0.
      if self.right_wheel_displacement is None:
        self.right_wheel_displacement = 0.
      if self.forward_displacement is None:
        self.forward_displacement = 0.
      if self.yaw_displacement is None:
        self.yaw_displacement = 0.
      if self.left_motor_torque is None:
        self.left_motor_torque = 0.
      if self.right_motor_torque is None:
        self.right_motor_torque = 0.
      if self.operation_mode is None:
        self.operation_mode = 0
      if self.gain_schedule is None:
        self.gain_schedule = 0
      if self.ui_battery is None:
        self.ui_battery = 0.
      if self.powerbase_battery is None:
        self.powerbase_battery = 0.
      if self.motors_enabled is None:
        self.motors_enabled = False
    else:
      self.pitch_angle = 0.
      self.pitch_rate = 0.
      self.roll_angle = 0.
      self.roll_rate = 0.
      self.left_wheel_velocity = 0.
      self.right_wheel_velocity = 0.
      self.yaw_rate = 0.
      self.servo_frames = 0.
      self.left_wheel_displacement = 0.
      self.right_wheel_displacement = 0.
      self.forward_displacement = 0.
      self.yaw_displacement = 0.
      self.left_motor_torque = 0.
      self.right_motor_torque = 0.
      self.operation_mode = 0
      self.gain_schedule = 0
      self.ui_battery = 0.
      self.powerbase_battery = 0.
      self.motors_enabled = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_14f2b2fB.pack(_x.pitch_angle, _x.pitch_rate, _x.roll_angle, _x.roll_rate, _x.left_wheel_velocity, _x.right_wheel_velocity, _x.yaw_rate, _x.servo_frames, _x.left_wheel_displacement, _x.right_wheel_displacement, _x.forward_displacement, _x.yaw_displacement, _x.left_motor_torque, _x.right_motor_torque, _x.operation_mode, _x.gain_schedule, _x.ui_battery, _x.powerbase_battery, _x.motors_enabled))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 67
      (_x.pitch_angle, _x.pitch_rate, _x.roll_angle, _x.roll_rate, _x.left_wheel_velocity, _x.right_wheel_velocity, _x.yaw_rate, _x.servo_frames, _x.left_wheel_displacement, _x.right_wheel_displacement, _x.forward_displacement, _x.yaw_displacement, _x.left_motor_torque, _x.right_motor_torque, _x.operation_mode, _x.gain_schedule, _x.ui_battery, _x.powerbase_battery, _x.motors_enabled,) = _struct_14f2b2fB.unpack(str[start:end])
      self.motors_enabled = bool(self.motors_enabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_14f2b2fB.pack(_x.pitch_angle, _x.pitch_rate, _x.roll_angle, _x.roll_rate, _x.left_wheel_velocity, _x.right_wheel_velocity, _x.yaw_rate, _x.servo_frames, _x.left_wheel_displacement, _x.right_wheel_displacement, _x.forward_displacement, _x.yaw_displacement, _x.left_motor_torque, _x.right_motor_torque, _x.operation_mode, _x.gain_schedule, _x.ui_battery, _x.powerbase_battery, _x.motors_enabled))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 67
      (_x.pitch_angle, _x.pitch_rate, _x.roll_angle, _x.roll_rate, _x.left_wheel_velocity, _x.right_wheel_velocity, _x.yaw_rate, _x.servo_frames, _x.left_wheel_displacement, _x.right_wheel_displacement, _x.forward_displacement, _x.yaw_displacement, _x.left_motor_torque, _x.right_motor_torque, _x.operation_mode, _x.gain_schedule, _x.ui_battery, _x.powerbase_battery, _x.motors_enabled,) = _struct_14f2b2fB.unpack(str[start:end])
      self.motors_enabled = bool(self.motors_enabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_14f2b2fB = struct.Struct("<14f2b2fB")
