//#line 2 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the segway_ros package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __segway_ros__SEGWAYCONFIG_H__
#define __segway_ros__SEGWAYCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace segway_ros
{
  class segwayConfigStatics;
  
  class segwayConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(segwayConfig &config, const segwayConfig &max, const segwayConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const segwayConfig &config1, const segwayConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, segwayConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const segwayConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, segwayConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const segwayConfig &config) const = 0;
      virtual void getValue(const segwayConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, 
          std::string a_description, std::string a_edit_method, T segwayConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (segwayConfig::* field);

      virtual void clamp(segwayConfig &config, const segwayConfig &max, const segwayConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const segwayConfig &config1, const segwayConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, segwayConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const segwayConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, segwayConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const segwayConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const segwayConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, segwayConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, segwayConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<segwayConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(segwayConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("teleop_vel_limit_mps"==(*_i)->name){teleop_vel_limit_mps = boost::any_cast<double>(val);}
        if("teleop_accel_limit_mps2"==(*_i)->name){teleop_accel_limit_mps2 = boost::any_cast<double>(val);}
        if("teleop_yaw_rate_limit_rps"==(*_i)->name){teleop_yaw_rate_limit_rps = boost::any_cast<double>(val);}
        if("teleop_yaw_accel_limit_rps2"==(*_i)->name){teleop_yaw_accel_limit_rps2 = boost::any_cast<double>(val);}
        if("vel_limit_mps"==(*_i)->name){vel_limit_mps = boost::any_cast<double>(val);}
        if("accel_limit_mps2"==(*_i)->name){accel_limit_mps2 = boost::any_cast<double>(val);}
        if("decel_limit_mps2"==(*_i)->name){decel_limit_mps2 = boost::any_cast<double>(val);}
        if("dtz_decel_limit_mps2"==(*_i)->name){dtz_decel_limit_mps2 = boost::any_cast<double>(val);}
        if("yaw_rate_limit_rps"==(*_i)->name){yaw_rate_limit_rps = boost::any_cast<double>(val);}
        if("yaw_accel_limit_rps2"==(*_i)->name){yaw_accel_limit_rps2 = boost::any_cast<double>(val);}
        if("lateral_accel_limit_mps2"==(*_i)->name){lateral_accel_limit_mps2 = boost::any_cast<double>(val);}
        if("tire_rolling_diameter_m"==(*_i)->name){tire_rolling_diameter_m = boost::any_cast<double>(val);}
        if("wheel_base_length_m"==(*_i)->name){wheel_base_length_m = boost::any_cast<double>(val);}
        if("wheel_track_width_m"==(*_i)->name){wheel_track_width_m = boost::any_cast<double>(val);}
        if("gear_ratio"==(*_i)->name){gear_ratio = boost::any_cast<double>(val);}
        if("enable_audio"==(*_i)->name){enable_audio = boost::any_cast<bool>(val);}
        if("motion_while_charging"==(*_i)->name){motion_while_charging = boost::any_cast<bool>(val);}
        if("balance_mode_enabled"==(*_i)->name){balance_mode_enabled = boost::any_cast<bool>(val);}
        if("balace_gains"==(*_i)->name){balace_gains = boost::any_cast<int>(val);}
        if("vel_ctl_input_filter"==(*_i)->name){vel_ctl_input_filter = boost::any_cast<int>(val);}
        if("yaw_ctl_input_filter"==(*_i)->name){yaw_ctl_input_filter = boost::any_cast<int>(val);}
        if("torqe_limit"==(*_i)->name){torqe_limit = boost::any_cast<double>(val);}
      }
    }

    double teleop_vel_limit_mps;
double teleop_accel_limit_mps2;
double teleop_yaw_rate_limit_rps;
double teleop_yaw_accel_limit_rps2;
double vel_limit_mps;
double accel_limit_mps2;
double decel_limit_mps2;
double dtz_decel_limit_mps2;
double yaw_rate_limit_rps;
double yaw_accel_limit_rps2;
double lateral_accel_limit_mps2;
double tire_rolling_diameter_m;
double wheel_base_length_m;
double wheel_track_width_m;
double gear_ratio;
bool enable_audio;
bool motion_while_charging;
bool balance_mode_enabled;
int balace_gains;
int vel_ctl_input_filter;
int yaw_ctl_input_filter;
double torqe_limit;

    bool state;
    std::string name;

    
}groups;



//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double teleop_vel_limit_mps;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double teleop_accel_limit_mps2;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double teleop_yaw_rate_limit_rps;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double teleop_yaw_accel_limit_rps2;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double vel_limit_mps;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double accel_limit_mps2;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double decel_limit_mps2;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double dtz_decel_limit_mps2;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double yaw_rate_limit_rps;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double yaw_accel_limit_rps2;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double lateral_accel_limit_mps2;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double tire_rolling_diameter_m;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double wheel_base_length_m;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double wheel_track_width_m;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double gear_ratio;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool enable_audio;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool motion_while_charging;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool balance_mode_enabled;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int balace_gains;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int vel_ctl_input_filter;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int yaw_ctl_input_filter;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double torqe_limit;
//#line 218 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("segwayConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const segwayConfig &__max__ = __getMax__();
      const segwayConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const segwayConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const segwayConfig &__getDefault__();
    static const segwayConfig &__getMax__();
    static const segwayConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const segwayConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void segwayConfig::ParamDescription<std::string>::clamp(segwayConfig &config, const segwayConfig &max, const segwayConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class segwayConfigStatics
  {
    friend class segwayConfig;
    
    segwayConfigStatics()
    {
segwayConfig::GroupDescription<segwayConfig::DEFAULT, segwayConfig> Default("Default", "", 0, 0, true, &segwayConfig::groups);
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.teleop_vel_limit_mps = 0.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.teleop_vel_limit_mps = 8.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.teleop_vel_limit_mps = 0.5;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("teleop_vel_limit_mps", "double", 2, "Maximum velocity in m/s for teleop", "", &segwayConfig::teleop_vel_limit_mps)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("teleop_vel_limit_mps", "double", 2, "Maximum velocity in m/s for teleop", "", &segwayConfig::teleop_vel_limit_mps)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.teleop_accel_limit_mps2 = 0.05;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.teleop_accel_limit_mps2 = 7.848;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.teleop_accel_limit_mps2 = 0.5;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("teleop_accel_limit_mps2", "double", 4, "Maximum velocity in m/s for teleop", "", &segwayConfig::teleop_accel_limit_mps2)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("teleop_accel_limit_mps2", "double", 4, "Maximum velocity in m/s for teleop", "", &segwayConfig::teleop_accel_limit_mps2)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.teleop_yaw_rate_limit_rps = 0.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.teleop_yaw_rate_limit_rps = 4.5;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.teleop_yaw_rate_limit_rps = 1.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("teleop_yaw_rate_limit_rps", "double", 8, "Maximum yaw_rate in rad/s for teleop", "", &segwayConfig::teleop_yaw_rate_limit_rps)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("teleop_yaw_rate_limit_rps", "double", 8, "Maximum yaw_rate in rad/s for teleop", "", &segwayConfig::teleop_yaw_rate_limit_rps)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.teleop_yaw_accel_limit_rps2 = 0.063;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.teleop_yaw_accel_limit_rps2 = 28.274;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.teleop_yaw_accel_limit_rps2 = 1.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("teleop_yaw_accel_limit_rps2", "double", 16, "Maximum yaw acceleration in rad/s^2 for teleop", "", &segwayConfig::teleop_yaw_accel_limit_rps2)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("teleop_yaw_accel_limit_rps2", "double", 16, "Maximum yaw acceleration in rad/s^2 for teleop", "", &segwayConfig::teleop_yaw_accel_limit_rps2)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.vel_limit_mps = 0.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.vel_limit_mps = 8.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.vel_limit_mps = 1.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("vel_limit_mps", "double", 32, "Maximum velocity in m/s for RMP", "", &segwayConfig::vel_limit_mps)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("vel_limit_mps", "double", 32, "Maximum velocity in m/s for RMP", "", &segwayConfig::vel_limit_mps)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.accel_limit_mps2 = 0.05;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.accel_limit_mps2 = 7.848;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.accel_limit_mps2 = 0.5;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("accel_limit_mps2", "double", 64, "Maximum acceleration in m/s^2 for RMP", "", &segwayConfig::accel_limit_mps2)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("accel_limit_mps2", "double", 64, "Maximum acceleration in m/s^2 for RMP", "", &segwayConfig::accel_limit_mps2)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.decel_limit_mps2 = 0.05;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.decel_limit_mps2 = 7.848;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.decel_limit_mps2 = 0.5;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("decel_limit_mps2", "double", 128, "Maximum deceleration in m/s^2 for RMP", "", &segwayConfig::decel_limit_mps2)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("decel_limit_mps2", "double", 128, "Maximum deceleration in m/s^2 for RMP", "", &segwayConfig::decel_limit_mps2)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.dtz_decel_limit_mps2 = 0.981;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.dtz_decel_limit_mps2 = 7.848;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.dtz_decel_limit_mps2 = 1.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("dtz_decel_limit_mps2", "double", 256, "Maximum emergency DTZ deceleration in m/s^2 for RMP", "", &segwayConfig::dtz_decel_limit_mps2)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("dtz_decel_limit_mps2", "double", 256, "Maximum emergency DTZ deceleration in m/s^2 for RMP", "", &segwayConfig::dtz_decel_limit_mps2)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.yaw_rate_limit_rps = 0.01;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.yaw_rate_limit_rps = 4.5;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.yaw_rate_limit_rps = 1.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("yaw_rate_limit_rps", "double", 512, "Maximum yaw rate in rad/s for RMP", "", &segwayConfig::yaw_rate_limit_rps)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("yaw_rate_limit_rps", "double", 512, "Maximum yaw rate in rad/s for RMP", "", &segwayConfig::yaw_rate_limit_rps)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.yaw_accel_limit_rps2 = 0.063;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.yaw_accel_limit_rps2 = 28.274;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.yaw_accel_limit_rps2 = 1.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("yaw_accel_limit_rps2", "double", 1024, "Maximum yaw acceleration in rad/s^2 for RMP", "", &segwayConfig::yaw_accel_limit_rps2)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("yaw_accel_limit_rps2", "double", 1024, "Maximum yaw acceleration in rad/s^2 for RMP", "", &segwayConfig::yaw_accel_limit_rps2)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.lateral_accel_limit_mps2 = 0.981;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.lateral_accel_limit_mps2 = 9.81;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.lateral_accel_limit_mps2 = 4.905;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("lateral_accel_limit_mps2", "double", 2048, "Maximum lateral acceleration in m/s^2 for RMP", "", &segwayConfig::lateral_accel_limit_mps2)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("lateral_accel_limit_mps2", "double", 2048, "Maximum lateral acceleration in m/s^2 for RMP", "", &segwayConfig::lateral_accel_limit_mps2)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.tire_rolling_diameter_m = 0.05;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.tire_rolling_diameter_m = 1.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.tire_rolling_diameter_m = 0.46228;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("tire_rolling_diameter_m", "double", 4096, "Tire rolling diameter in m for RMP", "", &segwayConfig::tire_rolling_diameter_m)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("tire_rolling_diameter_m", "double", 4096, "Tire rolling diameter in m for RMP", "", &segwayConfig::tire_rolling_diameter_m)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.wheel_base_length_m = 0.4142;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.wheel_base_length_m = 1.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.wheel_base_length_m = 0.5842;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("wheel_base_length_m", "double", 8192, "Distance between front and rear contact patch in m for RMP", "", &segwayConfig::wheel_base_length_m)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("wheel_base_length_m", "double", 8192, "Distance between front and rear contact patch in m for RMP", "", &segwayConfig::wheel_base_length_m)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.wheel_track_width_m = 0.3556;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.wheel_track_width_m = 1.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.wheel_track_width_m = 0.569976;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("wheel_track_width_m", "double", 16384, "Distance between left and right contact patch in m for RMP", "", &segwayConfig::wheel_track_width_m)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("wheel_track_width_m", "double", 16384, "Distance between left and right contact patch in m for RMP", "", &segwayConfig::wheel_track_width_m)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gear_ratio = 1.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gear_ratio = 200.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gear_ratio = 24.2667;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("gear_ratio", "double", 32768, "Input to ouput gear ratio for RMP", "", &segwayConfig::gear_ratio)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("gear_ratio", "double", 32768, "Input to ouput gear ratio for RMP", "", &segwayConfig::gear_ratio)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.enable_audio = 0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.enable_audio = 1;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.enable_audio = 1;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<bool>("enable_audio", "bool", 65536, "Check to enable audio", "", &segwayConfig::enable_audio)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<bool>("enable_audio", "bool", 65536, "Check to enable audio", "", &segwayConfig::enable_audio)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motion_while_charging = 0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motion_while_charging = 1;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motion_while_charging = 0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<bool>("motion_while_charging", "bool", 65536, "Allow motion with charger connected", "", &segwayConfig::motion_while_charging)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<bool>("motion_while_charging", "bool", 65536, "Allow motion with charger connected", "", &segwayConfig::motion_while_charging)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.balance_mode_enabled = 0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.balance_mode_enabled = 1;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.balance_mode_enabled = 0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<bool>("balance_mode_enabled", "bool", 65536, "Allow transition to balance mode; only for RMP220", "", &segwayConfig::balance_mode_enabled)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<bool>("balance_mode_enabled", "bool", 65536, "Allow transition to balance mode; only for RMP220", "", &segwayConfig::balance_mode_enabled)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.balace_gains = -2147483648;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.balace_gains = 2147483647;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.balace_gains = 0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<int>("balace_gains", "int", 65536, "Balance Gain Schedule", "{'enum_description': 'Balance gain tunings (see manual for RMP220)', 'enum': [{'srcline': 31, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Default'}, {'srcline': 32, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Light'}, {'srcline': 33, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'Tall'}, {'srcline': 34, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'Heavy'}, {'srcline': 35, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'Custom'}]}", &segwayConfig::balace_gains)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<int>("balace_gains", "int", 65536, "Balance Gain Schedule", "{'enum_description': 'Balance gain tunings (see manual for RMP220)', 'enum': [{'srcline': 31, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Default'}, {'srcline': 32, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Light'}, {'srcline': 33, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'Tall'}, {'srcline': 34, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'Heavy'}, {'srcline': 35, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'Custom'}]}", &segwayConfig::balace_gains)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.vel_ctl_input_filter = -2147483648;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.vel_ctl_input_filter = 2147483647;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.vel_ctl_input_filter = 0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<int>("vel_ctl_input_filter", "int", 65536, "Velocity Input Filter Cutoff", "{'enum_description': 'Velocity controller input filter cutoff frequency', 'enum': [{'srcline': 39, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'filter_10Hz_Cutoff'}, {'srcline': 40, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'filter_4Hz_Cutoff'}, {'srcline': 41, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'filter_1Hz_Cutoff'}, {'srcline': 42, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'filter_0p5Hz_Cutoff'}, {'srcline': 43, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'filter_0p2Hz_Cutoff'}]}", &segwayConfig::vel_ctl_input_filter)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<int>("vel_ctl_input_filter", "int", 65536, "Velocity Input Filter Cutoff", "{'enum_description': 'Velocity controller input filter cutoff frequency', 'enum': [{'srcline': 39, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'filter_10Hz_Cutoff'}, {'srcline': 40, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'filter_4Hz_Cutoff'}, {'srcline': 41, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'filter_1Hz_Cutoff'}, {'srcline': 42, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'filter_0p5Hz_Cutoff'}, {'srcline': 43, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'filter_0p2Hz_Cutoff'}]}", &segwayConfig::vel_ctl_input_filter)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.yaw_ctl_input_filter = -2147483648;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.yaw_ctl_input_filter = 2147483647;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.yaw_ctl_input_filter = 0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<int>("yaw_ctl_input_filter", "int", 65536, "Yaw Input Filter Cutoff", "{'enum_description': 'Yaw controller input filter cutoff frequency', 'enum': [{'srcline': 47, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'filter_10Hz_Cutoff'}, {'srcline': 48, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'filter_4Hz_Cutoff'}, {'srcline': 49, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'filter_1Hz_Cutoff'}, {'srcline': 50, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'filter_0p5Hz_Cutoff'}, {'srcline': 51, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'filter_0p2Hz_Cutoff'}]}", &segwayConfig::yaw_ctl_input_filter)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<int>("yaw_ctl_input_filter", "int", 65536, "Yaw Input Filter Cutoff", "{'enum_description': 'Yaw controller input filter cutoff frequency', 'enum': [{'srcline': 47, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'filter_10Hz_Cutoff'}, {'srcline': 48, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'filter_4Hz_Cutoff'}, {'srcline': 49, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'filter_1Hz_Cutoff'}, {'srcline': 50, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'filter_0p5Hz_Cutoff'}, {'srcline': 51, 'description': '', 'srcfile': '/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'filter_0p2Hz_Cutoff'}]}", &segwayConfig::yaw_ctl_input_filter)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.torqe_limit = 0.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.torqe_limit = 100.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.torqe_limit = 100.0;
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("torqe_limit", "double", 131072, "Limits peak torque from from system 0-100% of system capability", "", &segwayConfig::torqe_limit)));
//#line 293 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(segwayConfig::AbstractParamDescriptionConstPtr(new segwayConfig::ParamDescription<double>("torqe_limit", "double", 131072, "Limits peak torque from from system 0-100% of system capability", "", &segwayConfig::torqe_limit)));
//#line 246 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(segwayConfig::AbstractGroupDescriptionConstPtr(new segwayConfig::GroupDescription<segwayConfig::DEFAULT, segwayConfig>(Default)));
//#line 356 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<segwayConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<segwayConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<segwayConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    segwayConfig __max__;
    segwayConfig __min__;
    segwayConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const segwayConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static segwayConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &segwayConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const segwayConfig &segwayConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const segwayConfig &segwayConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const segwayConfig &segwayConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<segwayConfig::AbstractParamDescriptionConstPtr> &segwayConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<segwayConfig::AbstractGroupDescriptionConstPtr> &segwayConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const segwayConfigStatics *segwayConfig::__get_statics__()
  {
    const static segwayConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = segwayConfigStatics::get_instance();
    
    return statics;
  }

//#line 31 "/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg"
      const int segway_Default = 0;
//#line 32 "/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg"
      const int segway_Light = 1;
//#line 33 "/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg"
      const int segway_Tall = 2;
//#line 34 "/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg"
      const int segway_Heavy = 4;
//#line 35 "/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg"
      const int segway_Custom = 8;
//#line 39 "/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg"
      const int segway_filter_10Hz_Cutoff = 0;
//#line 40 "/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg"
      const int segway_filter_4Hz_Cutoff = 1;
//#line 41 "/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg"
      const int segway_filter_1Hz_Cutoff = 2;
//#line 42 "/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg"
      const int segway_filter_0p5Hz_Cutoff = 4;
//#line 43 "/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg"
      const int segway_filter_0p2Hz_Cutoff = 8;
//#line 47 "/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg"
      const int segway_filter_10Hz_Cutoff = 0;
//#line 48 "/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg"
      const int segway_filter_4Hz_Cutoff = 1;
//#line 49 "/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg"
      const int segway_filter_1Hz_Cutoff = 2;
//#line 50 "/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg"
      const int segway_filter_0p5Hz_Cutoff = 4;
//#line 51 "/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_ros/cfg/segway.cfg"
      const int segway_filter_0p2Hz_Cutoff = 8;
}

#endif // __SEGWAYRECONFIGURATOR_H__
