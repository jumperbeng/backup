// Generated by gencpp from file segway_msgs/Propulsion.msg
// DO NOT EDIT!


#ifndef SEGWAY_MSGS_MESSAGE_PROPULSION_H
#define SEGWAY_MSGS_MESSAGE_PROPULSION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace segway_msgs
{
template <class ContainerAllocator>
struct Propulsion_
{
  typedef Propulsion_<ContainerAllocator> Type;

  Propulsion_()
    : header()
    , min_propulsion_battery_soc(0.0)
    , mcu_battery_soc()
    , mcu_battery_temp_degC()
    , mcu_inst_power_W()
    , mcu_total_energy_Wh()
    , motor_current_A0pk()
    , max_motor_current_A0pk(0.0)
    , motor_current_limit_A0pk()
    , min_motor_current_limit_A0pk(0.0)  {
    }
  Propulsion_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , min_propulsion_battery_soc(0.0)
    , mcu_battery_soc(_alloc)
    , mcu_battery_temp_degC(_alloc)
    , mcu_inst_power_W(_alloc)
    , mcu_total_energy_Wh(_alloc)
    , motor_current_A0pk(_alloc)
    , max_motor_current_A0pk(0.0)
    , motor_current_limit_A0pk(_alloc)
    , min_motor_current_limit_A0pk(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _min_propulsion_battery_soc_type;
  _min_propulsion_battery_soc_type min_propulsion_battery_soc;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _mcu_battery_soc_type;
  _mcu_battery_soc_type mcu_battery_soc;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _mcu_battery_temp_degC_type;
  _mcu_battery_temp_degC_type mcu_battery_temp_degC;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _mcu_inst_power_W_type;
  _mcu_inst_power_W_type mcu_inst_power_W;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _mcu_total_energy_Wh_type;
  _mcu_total_energy_Wh_type mcu_total_energy_Wh;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _motor_current_A0pk_type;
  _motor_current_A0pk_type motor_current_A0pk;

   typedef float _max_motor_current_A0pk_type;
  _max_motor_current_A0pk_type max_motor_current_A0pk;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _motor_current_limit_A0pk_type;
  _motor_current_limit_A0pk_type motor_current_limit_A0pk;

   typedef float _min_motor_current_limit_A0pk_type;
  _min_motor_current_limit_A0pk_type min_motor_current_limit_A0pk;




  typedef boost::shared_ptr< ::segway_msgs::Propulsion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_msgs::Propulsion_<ContainerAllocator> const> ConstPtr;

}; // struct Propulsion_

typedef ::segway_msgs::Propulsion_<std::allocator<void> > Propulsion;

typedef boost::shared_ptr< ::segway_msgs::Propulsion > PropulsionPtr;
typedef boost::shared_ptr< ::segway_msgs::Propulsion const> PropulsionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_msgs::Propulsion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_msgs::Propulsion_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace segway_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'segway_msgs': ['/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::Propulsion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::Propulsion_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::Propulsion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::Propulsion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::Propulsion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::Propulsion_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_msgs::Propulsion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8db8f550407de4bfaf53927720c28e50";
  }

  static const char* value(const ::segway_msgs::Propulsion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8db8f550407de4bfULL;
  static const uint64_t static_value2 = 0xaf53927720c28e50ULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_msgs::Propulsion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_msgs/Propulsion";
  }

  static const char* value(const ::segway_msgs::Propulsion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_msgs::Propulsion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float32 min_propulsion_battery_soc\n\
float32[] mcu_battery_soc\n\
float32[] mcu_battery_temp_degC\n\
float32[] mcu_inst_power_W\n\
float32[] mcu_total_energy_Wh\n\
float32[] motor_current_A0pk\n\
float32 max_motor_current_A0pk\n\
float32[] motor_current_limit_A0pk\n\
float32 min_motor_current_limit_A0pk\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::segway_msgs::Propulsion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_msgs::Propulsion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.min_propulsion_battery_soc);
      stream.next(m.mcu_battery_soc);
      stream.next(m.mcu_battery_temp_degC);
      stream.next(m.mcu_inst_power_W);
      stream.next(m.mcu_total_energy_Wh);
      stream.next(m.motor_current_A0pk);
      stream.next(m.max_motor_current_A0pk);
      stream.next(m.motor_current_limit_A0pk);
      stream.next(m.min_motor_current_limit_A0pk);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Propulsion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_msgs::Propulsion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_msgs::Propulsion_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "min_propulsion_battery_soc: ";
    Printer<float>::stream(s, indent + "  ", v.min_propulsion_battery_soc);
    s << indent << "mcu_battery_soc[]" << std::endl;
    for (size_t i = 0; i < v.mcu_battery_soc.size(); ++i)
    {
      s << indent << "  mcu_battery_soc[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mcu_battery_soc[i]);
    }
    s << indent << "mcu_battery_temp_degC[]" << std::endl;
    for (size_t i = 0; i < v.mcu_battery_temp_degC.size(); ++i)
    {
      s << indent << "  mcu_battery_temp_degC[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mcu_battery_temp_degC[i]);
    }
    s << indent << "mcu_inst_power_W[]" << std::endl;
    for (size_t i = 0; i < v.mcu_inst_power_W.size(); ++i)
    {
      s << indent << "  mcu_inst_power_W[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mcu_inst_power_W[i]);
    }
    s << indent << "mcu_total_energy_Wh[]" << std::endl;
    for (size_t i = 0; i < v.mcu_total_energy_Wh.size(); ++i)
    {
      s << indent << "  mcu_total_energy_Wh[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mcu_total_energy_Wh[i]);
    }
    s << indent << "motor_current_A0pk[]" << std::endl;
    for (size_t i = 0; i < v.motor_current_A0pk.size(); ++i)
    {
      s << indent << "  motor_current_A0pk[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.motor_current_A0pk[i]);
    }
    s << indent << "max_motor_current_A0pk: ";
    Printer<float>::stream(s, indent + "  ", v.max_motor_current_A0pk);
    s << indent << "motor_current_limit_A0pk[]" << std::endl;
    for (size_t i = 0; i < v.motor_current_limit_A0pk.size(); ++i)
    {
      s << indent << "  motor_current_limit_A0pk[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.motor_current_limit_A0pk[i]);
    }
    s << indent << "min_motor_current_limit_A0pk: ";
    Printer<float>::stream(s, indent + "  ", v.min_motor_current_limit_A0pk);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_MSGS_MESSAGE_PROPULSION_H
