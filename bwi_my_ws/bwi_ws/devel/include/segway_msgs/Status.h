// Generated by gencpp from file segway_msgs/Status.msg
// DO NOT EDIT!


#ifndef SEGWAY_MSGS_MESSAGE_STATUS_H
#define SEGWAY_MSGS_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace segway_msgs
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : header()
    , fault_status_words()
    , mcu_fault_status()
    , operational_time(0.0)
    , operational_state(0)
    , dynamic_response(0)
    , machine_id(0)  {
    }
  Status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , fault_status_words(_alloc)
    , mcu_fault_status(_alloc)
    , operational_time(0.0)
    , operational_state(0)
    , dynamic_response(0)
    , machine_id(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _fault_status_words_type;
  _fault_status_words_type fault_status_words;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _mcu_fault_status_type;
  _mcu_fault_status_type mcu_fault_status;

   typedef float _operational_time_type;
  _operational_time_type operational_time;

   typedef uint32_t _operational_state_type;
  _operational_state_type operational_state;

   typedef uint32_t _dynamic_response_type;
  _dynamic_response_type dynamic_response;

   typedef uint32_t _machine_id_type;
  _machine_id_type machine_id;




  typedef boost::shared_ptr< ::segway_msgs::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_msgs::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::segway_msgs::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::segway_msgs::Status > StatusPtr;
typedef boost::shared_ptr< ::segway_msgs::Status const> StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_msgs::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_msgs::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace segway_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'segway_msgs': ['/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e6153147788521c761603cf3bb72726";
  }

  static const char* value(const ::segway_msgs::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e6153147788521cULL;
  static const uint64_t static_value2 = 0x761603cf3bb72726ULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_msgs/Status";
  }

  static const char* value(const ::segway_msgs::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint32[] fault_status_words\n\
uint32[] mcu_fault_status\n\
float32 operational_time\n\
uint32 operational_state\n\
uint32 dynamic_response\n\
uint32 machine_id\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::segway_msgs::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_msgs::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.fault_status_words);
      stream.next(m.mcu_fault_status);
      stream.next(m.operational_time);
      stream.next(m.operational_state);
      stream.next(m.dynamic_response);
      stream.next(m.machine_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_msgs::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_msgs::Status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "fault_status_words[]" << std::endl;
    for (size_t i = 0; i < v.fault_status_words.size(); ++i)
    {
      s << indent << "  fault_status_words[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.fault_status_words[i]);
    }
    s << indent << "mcu_fault_status[]" << std::endl;
    for (size_t i = 0; i < v.mcu_fault_status.size(); ++i)
    {
      s << indent << "  mcu_fault_status[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.mcu_fault_status[i]);
    }
    s << indent << "operational_time: ";
    Printer<float>::stream(s, indent + "  ", v.operational_time);
    s << indent << "operational_state: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.operational_state);
    s << indent << "dynamic_response: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dynamic_response);
    s << indent << "machine_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.machine_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_MSGS_MESSAGE_STATUS_H
