// Generated by gencpp from file segway_msgs/AuxPower.msg
// DO NOT EDIT!


#ifndef SEGWAY_MSGS_MESSAGE_AUXPOWER_H
#define SEGWAY_MSGS_MESSAGE_AUXPOWER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace segway_msgs
{
template <class ContainerAllocator>
struct AuxPower_
{
  typedef AuxPower_<ContainerAllocator> Type;

  AuxPower_()
    : header()
    , aux_soc()
    , aux_voltage_V()
    , aux_current_A()
    , aux_temp_degC()
    , aux_sys_status()
    , aux_bcu_status()
    , aux_bcu_faults()
    , startup_7p2v_batt_voltage_V(0.0)  {
    }
  AuxPower_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , aux_soc(_alloc)
    , aux_voltage_V(_alloc)
    , aux_current_A(_alloc)
    , aux_temp_degC(_alloc)
    , aux_sys_status(_alloc)
    , aux_bcu_status(_alloc)
    , aux_bcu_faults(_alloc)
    , startup_7p2v_batt_voltage_V(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _aux_soc_type;
  _aux_soc_type aux_soc;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _aux_voltage_V_type;
  _aux_voltage_V_type aux_voltage_V;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _aux_current_A_type;
  _aux_current_A_type aux_current_A;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _aux_temp_degC_type;
  _aux_temp_degC_type aux_temp_degC;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _aux_sys_status_type;
  _aux_sys_status_type aux_sys_status;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _aux_bcu_status_type;
  _aux_bcu_status_type aux_bcu_status;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _aux_bcu_faults_type;
  _aux_bcu_faults_type aux_bcu_faults;

   typedef float _startup_7p2v_batt_voltage_V_type;
  _startup_7p2v_batt_voltage_V_type startup_7p2v_batt_voltage_V;




  typedef boost::shared_ptr< ::segway_msgs::AuxPower_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_msgs::AuxPower_<ContainerAllocator> const> ConstPtr;

}; // struct AuxPower_

typedef ::segway_msgs::AuxPower_<std::allocator<void> > AuxPower;

typedef boost::shared_ptr< ::segway_msgs::AuxPower > AuxPowerPtr;
typedef boost::shared_ptr< ::segway_msgs::AuxPower const> AuxPowerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_msgs::AuxPower_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_msgs::AuxPower_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace segway_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'segway_msgs': ['/home/jumper/Documents/bwi_my_ws/bwi_ws/src/segway_v3/segway_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::AuxPower_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::AuxPower_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::AuxPower_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::AuxPower_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::AuxPower_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::AuxPower_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_msgs::AuxPower_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c5c3951c2c3b3b11a7ee2c4d5792ef7";
  }

  static const char* value(const ::segway_msgs::AuxPower_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c5c3951c2c3b3b1ULL;
  static const uint64_t static_value2 = 0x1a7ee2c4d5792ef7ULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_msgs::AuxPower_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_msgs/AuxPower";
  }

  static const char* value(const ::segway_msgs::AuxPower_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_msgs::AuxPower_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float32[] aux_soc\n\
float32[] aux_voltage_V\n\
float32[] aux_current_A\n\
float32[] aux_temp_degC\n\
uint32[] aux_sys_status\n\
uint32[] aux_bcu_status\n\
uint32[] aux_bcu_faults\n\
float32 startup_7p2v_batt_voltage_V\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::segway_msgs::AuxPower_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_msgs::AuxPower_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.aux_soc);
      stream.next(m.aux_voltage_V);
      stream.next(m.aux_current_A);
      stream.next(m.aux_temp_degC);
      stream.next(m.aux_sys_status);
      stream.next(m.aux_bcu_status);
      stream.next(m.aux_bcu_faults);
      stream.next(m.startup_7p2v_batt_voltage_V);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AuxPower_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_msgs::AuxPower_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_msgs::AuxPower_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "aux_soc[]" << std::endl;
    for (size_t i = 0; i < v.aux_soc.size(); ++i)
    {
      s << indent << "  aux_soc[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.aux_soc[i]);
    }
    s << indent << "aux_voltage_V[]" << std::endl;
    for (size_t i = 0; i < v.aux_voltage_V.size(); ++i)
    {
      s << indent << "  aux_voltage_V[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.aux_voltage_V[i]);
    }
    s << indent << "aux_current_A[]" << std::endl;
    for (size_t i = 0; i < v.aux_current_A.size(); ++i)
    {
      s << indent << "  aux_current_A[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.aux_current_A[i]);
    }
    s << indent << "aux_temp_degC[]" << std::endl;
    for (size_t i = 0; i < v.aux_temp_degC.size(); ++i)
    {
      s << indent << "  aux_temp_degC[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.aux_temp_degC[i]);
    }
    s << indent << "aux_sys_status[]" << std::endl;
    for (size_t i = 0; i < v.aux_sys_status.size(); ++i)
    {
      s << indent << "  aux_sys_status[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.aux_sys_status[i]);
    }
    s << indent << "aux_bcu_status[]" << std::endl;
    for (size_t i = 0; i < v.aux_bcu_status.size(); ++i)
    {
      s << indent << "  aux_bcu_status[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.aux_bcu_status[i]);
    }
    s << indent << "aux_bcu_faults[]" << std::endl;
    for (size_t i = 0; i < v.aux_bcu_faults.size(); ++i)
    {
      s << indent << "  aux_bcu_faults[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.aux_bcu_faults[i]);
    }
    s << indent << "startup_7p2v_batt_voltage_V: ";
    Printer<float>::stream(s, indent + "  ", v.startup_7p2v_batt_voltage_V);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_MSGS_MESSAGE_AUXPOWER_H
