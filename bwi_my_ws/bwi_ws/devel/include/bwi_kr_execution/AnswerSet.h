// Generated by gencpp from file bwi_kr_execution/AnswerSet.msg
// DO NOT EDIT!


#ifndef BWI_KR_EXECUTION_MESSAGE_ANSWERSET_H
#define BWI_KR_EXECUTION_MESSAGE_ANSWERSET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <bwi_kr_execution/AspFluent.h>

namespace bwi_kr_execution
{
template <class ContainerAllocator>
struct AnswerSet_
{
  typedef AnswerSet_<ContainerAllocator> Type;

  AnswerSet_()
    : fluents()
    , satisfied(false)  {
    }
  AnswerSet_(const ContainerAllocator& _alloc)
    : fluents(_alloc)
    , satisfied(false)  {
  (void)_alloc;
    }



   typedef std::vector< ::bwi_kr_execution::AspFluent_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::bwi_kr_execution::AspFluent_<ContainerAllocator> >::other >  _fluents_type;
  _fluents_type fluents;

   typedef uint8_t _satisfied_type;
  _satisfied_type satisfied;




  typedef boost::shared_ptr< ::bwi_kr_execution::AnswerSet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bwi_kr_execution::AnswerSet_<ContainerAllocator> const> ConstPtr;

}; // struct AnswerSet_

typedef ::bwi_kr_execution::AnswerSet_<std::allocator<void> > AnswerSet;

typedef boost::shared_ptr< ::bwi_kr_execution::AnswerSet > AnswerSetPtr;
typedef boost::shared_ptr< ::bwi_kr_execution::AnswerSet const> AnswerSetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bwi_kr_execution::AnswerSet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bwi_kr_execution::AnswerSet_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bwi_kr_execution

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'bwi_kr_execution': ['/home/jumper/Documents/bwi_my_ws/bwi_ws/src/bwi_common/bwi_kr_execution/msg', '/home/jumper/Documents/bwi_my_ws/bwi_ws/devel/share/bwi_kr_execution/msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bwi_kr_execution::AnswerSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bwi_kr_execution::AnswerSet_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bwi_kr_execution::AnswerSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bwi_kr_execution::AnswerSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bwi_kr_execution::AnswerSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bwi_kr_execution::AnswerSet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bwi_kr_execution::AnswerSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9b4c2ce462411c0af968d1312672b24e";
  }

  static const char* value(const ::bwi_kr_execution::AnswerSet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9b4c2ce462411c0aULL;
  static const uint64_t static_value2 = 0xf968d1312672b24eULL;
};

template<class ContainerAllocator>
struct DataType< ::bwi_kr_execution::AnswerSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bwi_kr_execution/AnswerSet";
  }

  static const char* value(const ::bwi_kr_execution::AnswerSet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bwi_kr_execution::AnswerSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "AspFluent[] fluents\n\
bool satisfied\n\
\n\
================================================================================\n\
MSG: bwi_kr_execution/AspFluent\n\
string name\n\
string[] variables\n\
uint32 timeStep\n\
";
  }

  static const char* value(const ::bwi_kr_execution::AnswerSet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bwi_kr_execution::AnswerSet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fluents);
      stream.next(m.satisfied);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AnswerSet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bwi_kr_execution::AnswerSet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bwi_kr_execution::AnswerSet_<ContainerAllocator>& v)
  {
    s << indent << "fluents[]" << std::endl;
    for (size_t i = 0; i < v.fluents.size(); ++i)
    {
      s << indent << "  fluents[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::bwi_kr_execution::AspFluent_<ContainerAllocator> >::stream(s, indent + "    ", v.fluents[i]);
    }
    s << indent << "satisfied: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.satisfied);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BWI_KR_EXECUTION_MESSAGE_ANSWERSET_H
