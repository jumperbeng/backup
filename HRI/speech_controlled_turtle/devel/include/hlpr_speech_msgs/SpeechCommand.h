// Generated by gencpp from file hlpr_speech_msgs/SpeechCommand.msg
// DO NOT EDIT!


#ifndef HLPR_SPEECH_MSGS_MESSAGE_SPEECHCOMMAND_H
#define HLPR_SPEECH_MSGS_MESSAGE_SPEECHCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hlpr_speech_msgs/StampedString.h>

namespace hlpr_speech_msgs
{
template <class ContainerAllocator>
struct SpeechCommand_
{
  typedef SpeechCommand_<ContainerAllocator> Type;

  SpeechCommand_()
    : stamped_string()
    , command()  {
    }
  SpeechCommand_(const ContainerAllocator& _alloc)
    : stamped_string(_alloc)
    , command(_alloc)  {
  (void)_alloc;
    }



   typedef  ::hlpr_speech_msgs::StampedString_<ContainerAllocator>  _stamped_string_type;
  _stamped_string_type stamped_string;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;




  typedef boost::shared_ptr< ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator> const> ConstPtr;

}; // struct SpeechCommand_

typedef ::hlpr_speech_msgs::SpeechCommand_<std::allocator<void> > SpeechCommand;

typedef boost::shared_ptr< ::hlpr_speech_msgs::SpeechCommand > SpeechCommandPtr;
typedef boost::shared_ptr< ::hlpr_speech_msgs::SpeechCommand const> SpeechCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hlpr_speech_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'hlpr_speech_msgs': ['/home/jumper/Documents/HRI/speech_controlled_turtle/src/hlpr_speech/hlpr_speech_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ecdf8b4af928b454a75935476d11010";
  }

  static const char* value(const ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ecdf8b4af928b45ULL;
  static const uint64_t static_value2 = 0x4a75935476d11010ULL;
};

template<class ContainerAllocator>
struct DataType< ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hlpr_speech_msgs/SpeechCommand";
  }

  static const char* value(const ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This messages includes the mapping from\n\
# the detected keyphrase to the command\n\
\n\
# Detected keyphrase and its time\n\
StampedString stamped_string\n\
# The mapped speech command\n\
string command\n\
\n\
\n\
\n\
================================================================================\n\
MSG: hlpr_speech_msgs/StampedString\n\
# Stamped string message to be used in speech recognition\n\
\n\
#Time stamp\n\
time stamp\n\
#Detected keyphrase\n\
string keyphrase\n\
";
  }

  static const char* value(const ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamped_string);
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeechCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hlpr_speech_msgs::SpeechCommand_<ContainerAllocator>& v)
  {
    s << indent << "stamped_string: ";
    s << std::endl;
    Printer< ::hlpr_speech_msgs::StampedString_<ContainerAllocator> >::stream(s, indent + "  ", v.stamped_string);
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HLPR_SPEECH_MSGS_MESSAGE_SPEECHCOMMAND_H
